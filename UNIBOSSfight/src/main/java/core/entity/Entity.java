package core.entity;

import core.component.Collider;
import core.component.Health;
import core.component.Hitbox;
import javafx.geometry.Point2D;
import javafx.scene.Node;
import java.util.Optional;

/**
 * An interface modelling the main concept of the game.
 */
public interface Entity {

    /**
     * Enumeration to manage the input of the entities.
     */
    enum Inputs {
        /**
         * left input.
         */
        LEFT,
        /**
         * right input.
         */
        RIGHT,
        /**
         * space input.
         */
        SPACE,
        /**
         * empty input.
         */
        EMPTY
    }

    /**
     * @return the width of the entity
     */
    int getWidth();

    /**
     * @return the height of the entity
     */
    int getHeight();

    /**
     * @return the position of the entity
     */
    Point2D getPosition();

    /**
     * @return the Hitbox of the entity
     */
    Hitbox getHitbox();

    /**
     * @return the Collider of the entity
     */
    Optional<Collider> getCollider();

    /**
     * @return the Health of the entity
     */
    Health getHealth();

    /**
     * @param position position of the player
     * @return true if the entity is close enough to the player in order to be rendered
     * inside the game window, false otherwise.
     */
    boolean isDisplayed(Point2D position);

    /**
     * @param position of the entity
     * @return the Node generated by the renderer which will be given as input to the Scene
     */
    Node render(Point2D position);

    /**
     * Takes as input an element of the Inputs enum and, from that,
     * the class will do the update.
     *
     * @param input an element of the enum
     */
    void update(Inputs input);

    /**
     * Manages the collision of the entity.
     * @param e the entity colliding
     */
    void manageCollision(Entity e);

}
